\frametitle{numpy.array vs lists}
  \begin{enumerate}
    \item Shape in numpy:
      \begin{itemize}
        \item Imagine we have a numpy array \lstinline|a|.
        \item \lstinline|a.shape[0]| height of the array (y dimesion).
        \item \lstinline|a.shape[1]| width of the array (x dimension).
      \end{itemize}
      \pause
    \item To index into a 2d array: \lstinline|regular_python_list[y][x]| \textrightarrow \ \lstinline|np_array[y, x]|
      \pause
    \item To get a chunk of an numpy array: \lstinline|np_array[y_start: y_end, x_start: x_end]|
      \pause
    \item \lstinline|numpy.zeros((y, x))| \textrightarrow Produces a 2d numpy array of x by y dimensions
      \pause
    \item Other than that, they behave very similar to regular python lists but come with a ton of helpful functions (See \lstinline|help(numpy.array))!
  \end{enumerate}
